name: ZTC Kernel Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_dispatch: # This allows this workflow to be called from another workflow

jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: 设定 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android12-5.10-lts"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      # Install ccache
      - name: 安装 依赖
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl build-essential libssl-dev bison flex libelf-dev dwarves

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 配置 Git
        run: |
          git config --global user.name "zzh20188"
          git config --global user.email "BuildGkiKernel@gmail.com"
      
      - name: 安装仓库
        run: |
          # Install dependencies
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."

          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-android12-5.10"

          # Debug print the branches
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          
      - name: 设置 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android12-5.10-lts"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: 初始化和同步内核源代码
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="android12-5.10-lts"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH}
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          # Sync repo and apply patches
          sed -i '/name="kernel\/common"/d' .repo/manifests/default.xml
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all)
          rm -rf common
          git clone https://github.com/ztc1997/android_gki_kernel_5.10_common.git --recurse-submodules --depth=1 common      
          curl -LSs "https://github.com/zzh20188/ZTC-Kenel-Build/releases/download/clang/clang-r563880.tar.gz" -o clang-r563880.tar.gz
          mkdir prebuilts-master/clang/host/linux-x86/clang-r563880
          tar -xzvf clang-r563880.tar.gz -C prebuilts-master/clang/host/linux-x86/clang-r563880
          # ln -s "$(pwd)/clang/clang-r563880" "$(pwd)/prebuilts-master/clang/host/linux-x86/clang-r563880"
          cd common
          sed -i 's|^CLANG_PREBUILT_BIN=.*|CLANG_PREBUILT_BIN=prebuilts-master/clang/host/linux-x86/clang-r563880/bin|' build.config.common
          

      - name: 获取 KSU & SUSFS 版本
        run: |
          echo "This is the KSU variant"
          git clone https://github.com/tiann/KernelSU.git KernelSU
          VAR=200
          cd KernelSU

          # 计算KSU版本号
          KSU_GIT_VERSION=$(git rev-list --count HEAD)
          KSU_VERSION=$((10000 + KSU_GIT_VERSION + VAR))
          echo $KSU_VERSION
          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV

          # 计算SUSFS版本号
          INFO="https://gitlab.com/simonpunk/susfs4ksu/-/raw/gki-android14-6.1/ksu_module_susfs/module.prop\?ref_type\=heads"
          SUS_VERSION=$(curl -s $INFO | awk -F '=' '$1 == "version" { print $2 }')
          echo $SUS_VERSION

          # 导出这两个值给release
          echo "kversion=$KSU_VERSION" >> $GITHUB_OUTPUT
          echo "sversion=$SUS_VERSION" >> $GITHUB_OUTPUT

          
      - name: 查看SUSFS配置设置
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

          # 用于debug config
          tail -n 60 ./common/arch/arm64/configs/gki_defconfig

      - name: 配置内核构时间/删除dirty字符
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"

          echo "5系:删除dirty字符串"
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          
     
      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 90
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd "$CONFIG"

            echo "Building the kernel..."
            LTO=thin KCFLAGS="-O3" BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC=clang || exit 1
            

      - name: 创建Bootimgs文件夹并复制镜像
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/out/android12-5.10/dist/Image ./bootimgs
          cp ./$CONFIG/out/android12-5.10/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/android12-5.10/dist/Image ./
          cp ./$CONFIG/out/android12-5.10/dist/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz


      - name: 创建不同格式的ZIP文件
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3

          # Create and upload zip for each format
          ZIP_NAME="ZTC-AnyKernel3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image

      - name: 添加 KernelSU
        id: add_KSU
        continue-on-error: true
        run: |
          REPO="tiann/KernelSU"

          FILENAME="build-manager.yml"
          KSUM="manager"
          
          # 初始化
          NUMBER=0
          DOWNLOAD_URL=""

          echo "开始查找包含 'manager' 产物的构建..."
          while true; do
            echo "--------------------------------------------------"
            echo "正在检查第 ${NUMBER} 个历史构建 (0代表最新)..."

            if [ "$NUMBER" -ge 9 ]; then
              echo "查找九次仍然失败，跳出循环。"
              break
            fi

            # 1. 获取指定顺序的成功构建的ID

            BUILD_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$REPO/actions/workflows/$FILENAME/runs?status=success" |
              jq -r '.workflow_runs['"$NUMBER"'].id')

            echo "找到构建 ID: $BUILD_ID"

            ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$REPO/actions/runs/$BUILD_ID/artifacts")

            result=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | contains("'"$KSUM"'")) | .name')

            if [ -z "$result" ]; then
              echo "没有找到包含 '$KSUM' 的项"
              NUMBER=$((NUMBER + 1))
            else
              echo "$result"
              DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "'"$KSUM"'") | .archive_download_url')
              break
            fi

          done
          
          # 下载 Manager 文件
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "KSU-管理器(${{ env.KSU_VERSION }}).zip" "$DOWNLOAD_URL"
          echo "Manager 文件已下载为：KSU-管理器(${{ env.KSU_VERSION }}).zip"
          unzip *.zip
          rm -rf *.zip
  
      - name: 添加 SUSFS 模块
        id: add_SUSFS
        continue-on-error: true
        run: |
          BUILD_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/workflows/build.yml/runs?status=success" |
          jq -r '.workflow_runs[0].id')

          ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$BUILD_ID/artifacts")

          DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[0].archive_download_url') 

          NAME=$(echo "$ARTIFACTS" | jq -r '.artifacts[0].name')
          echo "SUSFS_NAME=$NAME" >> $GITHUB_ENV
          NAME="susfs-$NAME.zip"
          
          echo $DOWNLOAD_URL
          echo $NAME
          # 下载 Manager 文件
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "$NAME" "$DOWNLOAD_URL"
          echo "$NAME 文件已下载.zip"         
          
          echo "正在检查调用者: ${{ github.caller_workflow }}"

          # 由用户调用或是由作者上传到release?

          if [ "${{ github.workflow }}" == "测试发布" ]; then
            echo "这是测试发布工作流"
            mkdir -p susfs-module && mv $NAME susfs-module
          else
            echo "这是其他工作流"
            mkdir -p susfs-module && unzip *.zip -d susfs-module
          fi
      
      - name: 上传编译资产 (仅 AK3)
        uses: actions/upload-artifact@v4
        with:
          name: ZTC-Anykernel3
          path: ./AnyKernel3/*

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: KSU-Manager(${{ env.KSU_VERSION }})
          path: |
            *.apk
  
      - name: 上传SUSFS模块
        uses: actions/upload-artifact@v4
        with:
          name: susfs-${{ env.SUSFS_NAME }}
          path: ./susfs-module/*
